#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.3.6 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 30 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 55 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1
          0 1344 0 17 3 47
#";; CS 4003: Programming Languages, Team Project"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 27 3 12 #"#lang racket"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"provide"
0 0 23 3 2 #" ("
0 0 14 3 15 #"all-defined-out"
0 0 23 3 3 #")) "
0 0 17 3 39 #";; so we can put tests in a second file"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 61
#";; definition of structures for MUPL programs - Do NOT change"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"struct"
0 0 23 3 1 #" "
0 0 14 3 3 #"var"
0 0 23 3 3 #"  ("
0 0 14 3 6 #"string"
0 0 23 3 2 #") "
0 0 22 3 13 #"#:transparent"
0 0 23 3 3 #")  "
0 0 17 3 32 #";; a variable, e.g., (var \"foo\")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"struct"
0 0 23 3 1 #" "
0 0 14 3 3 #"int"
0 0 23 3 3 #"  ("
0 0 14 3 3 #"num"
0 0 23 3 5 #")    "
0 0 22 3 13 #"#:transparent"
0 0 23 3 3 #")  "
0 0 17 3 28 #";; a constant number, e.g., "
0 0 17 3 8 #"(int 17)"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"struct"
0 0 23 3 1 #" "
0 0 14 3 3 #"add"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"e1"
0 0 23 3 1 #" "
0 0 14 3 2 #"e2"
0 0 23 3 3 #")  "
0 0 22 3 13 #"#:transparent"
0 0 23 3 3 #")  "
0 0 17 3 22 #";; add two expressions"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"struct"
0 0 23 3 1 #" "
0 0 14 3 9 #"ifgreater"
0 0 23 3 2 #" ("
0 0 14 3 2 #"e1"
0 0 23 3 1 #" "
0 0 14 3 2 #"e2"
0 0 23 3 1 #" "
0 0 14 3 2 #"e3"
0 0 23 3 1 #" "
0 0 14 3 2 #"e4"
0 0 23 3 5 #")    "
0 0 22 3 13 #"#:transparent"
0 0 23 3 2 #") "
0 0 17 3 19 #";; if e1 > e2 then "
0 0 17 3 10 #"e3 else e4"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"struct"
0 0 23 3 1 #" "
0 0 14 3 3 #"fun"
0 0 23 3 3 #"  ("
0 0 14 3 7 #"nameopt"
0 0 23 3 1 #" "
0 0 14 3 6 #"formal"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 2 #") "
0 0 22 3 13 #"#:transparent"
0 0 23 3 2 #") "
0 0 17 3 18 #";; a recursive(?) "
0 0 17 3 19 #"1-argument function"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"struct"
0 0 23 3 1 #" "
0 0 14 3 4 #"call"
0 0 23 3 2 #" ("
0 0 14 3 6 #"funexp"
0 0 23 3 1 #" "
0 0 14 3 6 #"actual"
0 0 23 3 8 #")       "
0 0 22 3 13 #"#:transparent"
0 0 23 3 2 #") "
0 0 17 3 16 #";; function call"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"struct"
0 0 23 3 1 #" "
0 0 14 3 4 #"mlet"
0 0 23 3 2 #" ("
0 0 14 3 3 #"var"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 2 #") "
0 0 22 3 13 #"#:transparent"
0 0 23 3 2 #") "
0 0 17 3 28 #";; a local binding (let var "
0 0 17 3 13 #"= e in body) "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"struct"
0 0 23 3 1 #" "
0 0 14 3 5 #"apair"
0 0 23 3 2 #" ("
0 0 14 3 2 #"e1"
0 0 23 3 1 #" "
0 0 14 3 2 #"e2"
0 0 23 3 6 #")     "
0 0 22 3 13 #"#:transparent"
0 0 23 3 2 #") "
0 0 17 3 18 #";; make a new pair"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"struct"
0 0 23 3 1 #" "
0 0 14 3 3 #"fst"
0 0 23 3 3 #"  ("
0 0 14 3 1 #"e"
0 0 23 3 5 #")    "
0 0 22 3 13 #"#:transparent"
0 0 23 3 2 #") "
0 0 17 3 27 #";; get first part of a pair"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"struct"
0 0 23 3 1 #" "
0 0 14 3 3 #"snd"
0 0 23 3 3 #"  ("
0 0 14 3 1 #"e"
0 0 23 3 5 #")    "
0 0 22 3 13 #"#:transparent"
0 0 23 3 2 #") "
0 0 17 3 28 #";; get second part of a pair"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"struct"
0 0 23 3 1 #" "
0 0 14 3 5 #"aunit"
0 0 23 3 7 #" ()    "
0 0 22 3 13 #"#:transparent"
0 0 23 3 2 #") "
0 0 17 3 35 #";; unit value -- good for ending a "
0 0 17 3 4 #"list"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"struct"
0 0 23 3 1 #" "
0 0 14 3 7 #"isaunit"
0 0 23 3 2 #" ("
0 0 14 3 1 #"e"
0 0 23 3 2 #") "
0 0 22 3 13 #"#:transparent"
0 0 23 3 2 #") "
0 0 17 3 36 #";; evaluate to 1 if e is unit else 0"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 63
#";; a closure is not in \"source\" programs; it is what functions "
0 0 17 3 11 #"evaluate to"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"struct"
0 0 23 3 1 #" "
0 0 14 3 7 #"closure"
0 0 23 3 2 #" ("
0 0 14 3 3 #"env"
0 0 23 3 1 #" "
0 0 14 3 3 #"fun"
0 0 23 3 2 #") "
0 0 22 3 13 #"#:transparent"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 19 #";; Part 1 - Warm-up"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 35 #";; CHANGE (put your solutions here)"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 20 #"racketlist->mupllist"
0 0 23 3 1 #" "
0 0 14 3 2 #"ls"
0 0 23 3 2 #") "
0 0 17 3 35 #";;translate RACKET lists into MUPL "
0 0 17 3 6 #"lists "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 5 #"null?"
0 0 23 3 1 #" "
0 0 14 3 2 #"ls"
0 0 23 3 2 #") "
0 0 14 3 4 #"null"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 7 #"number?"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 2 #"ls"
0 0 23 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 3 #"int"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 2 #"ls"
0 0 23 3 3 #")) "
0 0 23 3 1 #"("
0 0 14 3 20 #"racketlist->mupllist"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 2 #"ls"
0 0 23 3 4 #")))]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 5 #"pair?"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 2 #"ls"
0 0 23 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 5 #"apair"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 2 #"ls"
0 0 23 3 4 #")) ("
0 0 14 3 3 #"cdr"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 2 #"ls"
0 0 23 11 4 #"))) "
0 0 23 3 1 #"("
0 0 14 3 20 #"racketlist->mupllist"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 2 #"ls"
0 0 23 3 4 #")))]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 7 #"string?"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 2 #"ls"
0 0 23 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 3 #"var"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 2 #"ls"
0 0 23 3 3 #")) "
0 0 23 3 1 #"("
0 0 14 3 20 #"racketlist->mupllist"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 2 #"ls"
0 0 23 3 6 #")))]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 20 #"mupllist->racketlist"
0 0 23 3 1 #" "
0 0 14 3 2 #"ls"
0 0 23 3 2 #") "
0 0 17 3 35 #";;translate MUPL lists into RACKET "
0 0 17 3 5 #"lists"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 5 #"null?"
0 0 23 3 1 #" "
0 0 14 3 2 #"ls"
0 0 23 3 2 #") "
0 0 14 3 4 #"null"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 4 #"int?"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 2 #"ls"
0 0 23 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 23 3 3 #" (("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 2 #"ls"
0 0 23 3 4 #")) ("
0 0 14 3 20 #"mupllist->racketlist"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 2 #"ls"
0 0 23 3 4 #")))]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 6 #"apair?"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 2 #"ls"
0 0 23 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 23 3 3 #" (("
0 0 14 3 3 #"car"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 2 #"ls"
0 0 23 3 4 #")) ("
0 0 14 3 3 #"cdr"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 2 #"ls"
0 0 23 3 4 #"))) "
0 0 23 3 1 #"("
0 0 14 3 20 #"mupllist->racketlist"
0 0 23 11 1 #" "
0 0 23 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 2 #"ls"
0 0 23 3 4 #")))]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 4 #"var?"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 2 #"ls"
0 0 23 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 6 #"string"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 2 #"ls"
0 0 23 3 3 #")) "
0 0 23 3 1 #"("
0 0 14 3 20 #"racketlist->mupllist"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 2 #"ls"
0 0 23 3 7 #")))])) "
0 0 23 29 1 #"\n"
0 0 17 3 37 #";; Part 2 - Implementing the language"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 38 #";; lookup a variable in an environment"
0 0 23 29 1 #"\n"
0 0 17 3 30 #";; Do NOT change this function"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"envlookup"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 1 #" "
0 0 14 3 3 #"str"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 5 #"null?"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 3 #") ("
0 0 14 3 5 #"error"
0 0 23 3 1 #" "
0 0 19 3 36 #"\"unbound variable during evaluation\""
0 0 23 3 1 #" "
0 0 14 3 3 #"str"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 6 #"equal?"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 3 #")) "
0 0 14 3 3 #"str"
0 0 23 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 3 #"))]"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ["
0 0 20 3 2 #"#t"
0 0 23 3 2 #" ("
0 0 14 3 9 #"envlookup"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 2 #") "
0 0 14 3 3 #"str"
0 0 23 3 4 #")]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 46 #";; Do NOT change the two cases given to you.  "
0 0 23 29 1 #"\n"
0 0 17 3 57 #";; DO add more cases for other kinds of MUPL expressions."
0 0 23 29 1 #"\n"
0 0 17 3 65
#";; We will test eval-under-env by calling it directly even though"
0 0 23 29 1 #"\n"
0 0 17 3 60
#";; \"in real life\" it would be a helper function of eval-exp."
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 14 #"eval-under-env"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 4 #"var?"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 9 #"envlookup"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 2 #" ("
0 0 14 3 10 #"var-string"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 23 3 3 #"))]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 4 #"add?"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 23 3 3 #" (["
0 0 14 3 2 #"v1"
0 0 23 3 2 #" ("
0 0 14 3 14 #"eval-under-env"
0 0 23 3 2 #" ("
0 0 14 3 6 #"add-e1"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 23 3 2 #") "
0 0 14 3 3 #"env"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ["
0 0 14 3 2 #"v2"
0 0 23 3 2 #" ("
0 0 14 3 14 #"eval-under-env"
0 0 23 3 2 #" ("
0 0 14 3 6 #"add-e2"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 23 3 2 #") "
0 0 14 3 3 #"env"
0 0 23 3 3 #")])"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 4 #"int?"
0 0 23 3 1 #" "
0 0 14 3 2 #"v1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 4 #"int?"
0 0 23 3 1 #" "
0 0 14 3 2 #"v2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 3 #"int"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 2 #" ("
0 0 14 3 7 #"int-num"
0 0 23 3 1 #" "
0 0 14 3 2 #"v1"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 14 3 7 #"int-num"
0 0 23 3 1 #" "
0 0 14 3 2 #"v2"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 5 #"error"
0 0 23 3 1 #" "
0 0 19 3 37 #"\"MUPL addition applied to non-number\""
0 0 23 3 4 #")))]"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 17 3 29 #";; CHANGE add more cases here"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 4 #"int?"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 23 3 2 #") "
0 0 14 3 1 #"e"
0 0 23 3 3 #"]  "
0 0 17 3 5 #";;int"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 7 #"string?"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 23 3 2 #") "
0 0 14 3 1 #"e"
0 0 23 3 3 #"]  "
0 0 17 3 8 #";;string"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 8 #"closure?"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 23 3 2 #") "
0 0 14 3 1 #"e"
0 0 23 3 3 #"]  "
0 0 17 3 9 #";;closure"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 6 #"aunit?"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 23 3 2 #") "
0 0 14 3 1 #"e"
0 0 23 3 3 #"]  "
0 0 17 3 7 #";;aunit"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 6 #"apair?"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 23 3 2 #") "
0 0 17 3 7 #";;apair"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 23 3 3 #" (["
0 0 14 3 2 #"e1"
0 0 23 3 2 #" ("
0 0 14 3 8 #"eval-exp"
0 0 23 3 2 #" ("
0 0 14 3 8 #"apair-e1"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 23 3 3 #"))]"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ["
0 0 14 3 2 #"e2"
0 0 23 3 2 #" ("
0 0 14 3 8 #"eval-exp"
0 0 23 3 2 #" ("
0 0 14 3 8 #"apair-e2"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 23 3 4 #"))])"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 14 3 5 #"apair"
0 0 23 3 1 #" "
0 0 14 3 2 #"e1"
0 0 23 3 1 #" "
0 0 14 3 2 #"e2"
0 0 23 3 3 #"))]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 4 #"fun?"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 23 3 3 #") ("
0 0 14 3 7 #"closure"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 10 #"ifgreater?"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 23 3 2 #") "
0 0 17 3 12 #";; ifgreater"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 23 3 3 #" (["
0 0 14 3 2 #"v1"
0 0 23 3 2 #" ("
0 0 14 3 14 #"eval-under-env"
0 0 23 3 2 #" ("
0 0 14 3 12 #"ifgreater-e1"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 23 3 2 #") "
0 0 14 3 3 #"env"
0 0 23 3 2 #")]"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ["
0 0 14 3 2 #"v2"
0 0 23 3 2 #" ("
0 0 14 3 14 #"eval-under-env"
0 0 23 3 2 #" ("
0 0 14 3 12 #"ifgreater-e2"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 23 3 2 #") "
0 0 14 3 3 #"env"
0 0 23 3 3 #")])"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 3 #"and"
0 0 23 3 2 #" ("
0 0 14 3 4 #"int?"
0 0 23 3 1 #" "
0 0 14 3 2 #"v1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 4 #"int?"
0 0 23 3 1 #" "
0 0 14 3 2 #"v2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 1 #">"
0 0 23 3 2 #" ("
0 0 14 3 7 #"int-num"
0 0 23 3 1 #" "
0 0 14 3 2 #"v1"
0 0 23 3 3 #") ("
0 0 14 3 7 #"int-num"
0 0 23 3 1 #" "
0 0 14 3 2 #"v2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 14 3 8 #"eval-exp"
0 0 23 3 2 #" ("
0 0 14 3 12 #"ifgreater-e3"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 14 3 8 #"eval-exp"
0 0 23 3 2 #" ("
0 0 14 3 12 #"ifgreater-e4"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 23 3 16 #")))             "
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 5 #"error"
0 0 23 3 1 #" "
0 0 19 3 38 #"\"MUPL ifgreater applied to non-number\""
0 0 23 3 4 #")))]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 5 #"mlet?"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 23 3 3 #")  "
0 0 17 3 6 #";;mlet"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 23 3 3 #" (["
0 0 14 3 1 #"v"
0 0 23 3 2 #" ("
0 0 14 3 8 #"eval-exp"
0 0 23 3 2 #" ("
0 0 14 3 8 #"mlet-var"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 23 3 4 #"))])"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 14 3 14 #"eval-under-env"
0 0 23 3 2 #" ("
0 0 14 3 9 #"mlet-body"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 23 3 2 #") "
0 0 14 3 1 #"v"
0 0 23 3 3 #"))]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 8 #"isaunit?"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 23 3 2 #") "
0 0 17 3 9 #";;isaunit"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 23 3 3 #" (["
0 0 14 3 3 #"sub"
0 0 23 3 2 #" ("
0 0 14 3 8 #"eval-exp"
0 0 23 3 1 #"("
0 0 14 3 9 #"isaunit-e"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 23 3 4 #"))])"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 6 #"aunit?"
0 0 23 3 1 #" "
0 0 14 3 3 #"sub"
0 0 23 3 3 #") ("
0 0 14 3 3 #"int"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 3 #") ("
0 0 14 3 3 #"int"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 4 #")))]"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 17 3 2 #";;"
0 0 17 3 1 #"("
0 0 17 3 6 #"struct"
0 0 17 3 1 #" "
0 0 17 3 7 #"closure"
0 0 17 3 2 #" ("
0 0 17 3 3 #"env"
0 0 17 3 1 #" "
0 0 17 3 3 #"fun"
0 0 17 3 2 #") "
0 0 17 3 15 #"#:transparent) "
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 5 #"call?"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 23 3 2 #") "
0 0 17 3 6 #";;call"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 23 3 3 #" (["
0 0 14 3 2 #"v1"
0 0 23 3 2 #" ("
0 0 14 3 8 #"eval-exp"
0 0 23 3 2 #" ("
0 0 14 3 11 #"call-funexp"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 23 3 3 #"))]"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ["
0 0 14 3 2 #"v2"
0 0 23 3 2 #" ("
0 0 14 3 8 #"eval-exp"
0 0 23 3 2 #" ("
0 0 14 3 11 #"call-actual"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 23 3 4 #"))])"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 8 #"closure?"
0 0 23 3 1 #" "
0 0 14 3 2 #"v1"
0 0 23 3 3 #") ("
0 0 14 3 14 #"eval-under-env"
0 0 23 3 2 #" ("
0 0 14 3 11 #"closure-fun"
0 0 23 3 1 #" "
0 0 14 3 2 #"v1"
0 0 23 3 4 #") (("
0 0 14 3 11 #"closure-env"
0 0 23 3 1 #" "
0 0 14 3 2 #"v1"
0 0 23 3 2 #") "
0 0 14 3 2 #"v2"
0 0 23 3 3 #"))("
0 0 14 3 5 #"error"
0 0 23 11 1 #" "
0 0 19 3 5 #"\"bad "
0 0 19 3 5 #"MUPL "
0 0 19 3 5 #"call "
0 0 19 3 11 #"expression\""
0 0 23 3 4 #")))]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 4 #"fst?"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 23 3 2 #") "
0 0 17 3 5 #";;fst"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 23 3 3 #" (["
0 0 14 3 3 #"res"
0 0 23 3 2 #" ("
0 0 14 3 8 #"eval-exp"
0 0 23 3 2 #" ("
0 0 14 3 5 #"fst-e"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 23 3 4 #"))])"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 23 3 1 #" "
0 0 14 3 3 #"res"
0 0 23 3 3 #") ("
0 0 14 3 8 #"apair-e1"
0 0 23 3 1 #" "
0 0 14 3 3 #"res"
0 0 23 3 3 #") ("
0 0 14 3 8 #"apair-e2"
0 0 23 3 1 #" "
0 0 14 3 3 #"res"
0 0 23 3 4 #")))]"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        [("
0 0 14 3 4 #"snd?"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 23 3 2 #") "
0 0 17 3 5 #";;snd"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 23 3 3 #" (["
0 0 14 3 3 #"res"
0 0 23 3 2 #" ("
0 0 14 3 8 #"eval-exp"
0 0 23 3 2 #" ("
0 0 14 3 5 #"snd-e"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 23 3 4 #"))])"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 23 3 1 #" "
0 0 14 3 3 #"res"
0 0 23 3 3 #") ("
0 0 14 3 8 #"apair-e2"
0 0 23 3 1 #" "
0 0 14 3 3 #"res"
0 0 23 3 3 #") ("
0 0 14 3 8 #"apair-e1"
0 0 23 3 1 #" "
0 0 14 3 3 #"res"
0 0 23 3 4 #")))]"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ["
0 0 20 3 2 #"#t"
0 0 23 3 2 #" ("
0 0 14 3 5 #"error"
0 0 23 3 1 #" "
0 0 19 3 21 #"\"bad MUPL expression\""
0 0 23 3 4 #")]))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 16 #";; Do NOT change"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 8 #"eval-exp"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 14 #"eval-under-env"
0 0 23 3 1 #" "
0 0 14 3 1 #"e"
0 0 23 3 1 #" "
0 0 14 3 4 #"null"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 23 29 1 #"\n"
0 0 17 3 34 #";; Part 3 - Expanding the language"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 56 #";**** i believe is incorrect: is not evaluating anything"
0 0 23 29 1 #"\n"
0 0 17 3 28 #";;(define (ifaunit e1 e2 e3)"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 17 3 41 #";;(ifgreater (isaunit e1) (int 0) e2 e3))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 7 #"ifaunit"
0 0 23 3 1 #" "
0 0 14 3 2 #"e1"
0 0 23 3 1 #" "
0 0 14 3 2 #"e2"
0 0 23 3 1 #" "
0 0 14 3 2 #"e3"
0 0 23 3 2 #") "
0 0 17 3 9 #";complete"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 1 #"="
0 0 23 3 2 #" ("
0 0 14 3 3 #"int"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 3 #") ("
0 0 14 3 8 #"eval-exp"
0 0 23 3 2 #" ("
0 0 14 3 7 #"isaunit"
0 0 23 3 2 #" ("
0 0 14 3 2 #"e1"
0 0 23 3 6 #")))) ("
0 0 14 3 8 #"eval-exp"
0 0 23 3 1 #" "
0 0 14 3 2 #"e2"
0 0 23 3 3 #") ("
0 0 14 3 8 #"eval-exp"
0 0 23 3 1 #" "
0 0 14 3 2 #"e3"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 69
(
 #";b) Write a Racket function mlet* that takes a Racket list of Racket"
 #" "
) 0 0 17 11 24 #"pairs \342\200\231((s1 . e1) . . "
0 0 17 3 28 #". (si . ei) . . . (sn . en))"
0 0 23 29 1 #"\n"
0 0 17 3 67
#";   and a final MUPL expression en+1. In each pair, assume si is a "
0 0 17 11 24 #"Racket string and ei is "
0 0 17 3 18 #"a MUPL expression."
0 0 23 29 1 #"\n"
0 0 17 3 69
(
 #";   mlet* returns a MUPL expression whose value is en+1 evaluated in"
 #" "
) 0 0 17 3 20 #"an environment where"
0 0 23 29 1 #"\n"
0 0 17 3 64
#";   each si is a variable bound to the result of evaluating the "
0 0 17 11 29 #"corresponding ei for 1 \342\211\244 i "
0 0 17 3 6 #"\342\211\244 n."
0 0 23 29 1 #"\n"
0 0 17 3 69
(
 #";   The bindings are done sequentially, so that each ei is evaluated"
 #" "
) 0 0 17 11 18 #"in an environment "
0 0 17 3 16 #"where s1 through"
0 0 23 29 1 #"\n"
0 0 17 3 70
(
 #";   si\342\210\2221 have been previously bound to the values e1 thro"
 #"ugh ei\342\210\2221."
) 0 0 23 29 1 #"\n"
0 0 17 3 48 #"; Note: returns first and second element of pair"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 5 #"mlet*"
0 0 23 3 1 #" "
0 0 14 3 3 #"lst"
0 0 23 3 2 #") "
0 0 17 3 38 #";*****waiting for professor's feedback"
0 0 23 29 1 #"\n"
0 0 23 3 2 #" ("
0 0 15 3 6 #"letrec"
0 0 23 3 3 #" (["
0 0 14 3 2 #"si"
0 0 23 3 2 #" ("
0 0 14 3 8 #"apair-e1"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 3 #"lst"
0 0 23 3 6 #"))]) ("
0 0 14 3 2 #"si"
0 0 23 3 2 #" ("
0 0 14 3 8 #"eval-exp"
0 0 23 3 2 #" ("
0 0 14 3 8 #"apair-e1"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 3 #"lst"
0 0 23 3 6 #"))))))"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 17 3 70
(
 #";***** incorrect: its supposed to compare for ints and needs more wo"
 #"rk"
) 0 0 23 29 1 #"\n"
0 0 17 3 28 #";;(define (ifeq e1 e2 e3 e4)"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 17 3 18 #";;(ifgreater e1 e2"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 17 3 34 #";;         (ifgreater e2 e1 e3 e4)"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 17 3 47 #";;       (ifgreater e2 e1 e4 e3))) ; complete  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 4 #"ifeq"
0 0 23 3 1 #" "
0 0 14 3 2 #"e1"
0 0 23 3 1 #" "
0 0 14 3 2 #"e2"
0 0 23 3 1 #" "
0 0 14 3 2 #"e3"
0 0 23 3 1 #" "
0 0 14 3 2 #"e4"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 1 #"="
0 0 23 3 2 #" ("
0 0 14 3 7 #"int-num"
0 0 23 3 1 #" "
0 0 14 3 2 #"e1"
0 0 23 3 3 #") ("
0 0 14 3 7 #"int-num"
0 0 23 3 1 #" "
0 0 14 3 2 #"e2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 8 #"eval-exp"
0 0 23 3 1 #" "
0 0 14 3 2 #"e3"
0 0 23 3 3 #") ("
0 0 14 3 8 #"eval-exp"
0 0 23 3 1 #" "
0 0 14 3 2 #"e4"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 30 #";; Part 4 - Using the language"
0 0 23 29 1 #"\n"
0 0 17 3 70
(
 #";;Bind to the Racket variable mupl-map a MUPL function that acts lik"
 #"e "
) 0 0 17 11 16 #"map (as we used "
0 0 17 3 53 #"extensively in ML). Your function should be curried: "
0 0 17 11 35 #"it should take a MUPL function and "
0 0 17 3 14 #"return a MUPL "
0 0 17 3 16 #"function that ta"
0 0 17 3 4 #"kes "
0 0 17 3 12 #"a MUPL list "
0 0 17 11 45 #"and applies the function to every element of "
0 0 17 3 9 #"the list "
0 0 17 3 65
#"returning a new MUPL list. Recall a MUPL list is aunit or a pair "
0 0 17 11 17 #"where the second "
0 0 17 3 25 #"component is a MUPL list."
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 8 #"mupl-map"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"f"
0 0 23 3 1 #" "
0 0 14 3 3 #"lst"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 5 #"null?"
0 0 23 3 1 #" "
0 0 14 3 3 #"lst"
0 0 23 3 2 #") "
0 0 14 3 4 #"null"
0 0 23 3 1 #"]"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ["
0 0 20 3 2 #"#t"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 8 #"eval-exp"
0 0 23 3 2 #" ("
0 0 14 3 1 #"f"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 3 #"lst"
0 0 23 3 5 #"))) ("
0 0 14 3 8 #"mupl-map"
0 0 23 3 1 #" "
0 0 14 3 1 #"f"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 3 #"lst"
0 0 23 3 10 #")))])))   "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 70
(
 #"; Bind to the Racket variable mupl-mapAddN a MUPL function that take"
 #"s "
) 0 0 17 11 18 #"an MUPL integer i "
0 0 17 3 4 #"and "
0 0 17 3 7 #"returns"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 4 #"MUPL"
0 0 17 3 1 #" "
0 0 17 3 8 #"function"
0 0 17 3 1 #" "
0 0 17 3 4 #"that"
0 0 17 3 1 #" "
0 0 17 3 5 #"takes"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 4 #"MUPL"
0 0 17 3 1 #" "
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 2 #"of"
0 0 17 3 1 #" "
0 0 17 3 4 #"MUPL"
0 0 17 3 1 #" "
0 0 17 3 8 #"integers"
0 0 17 3 1 #" "
0 0 17 3 3 #"and"
0 0 17 3 1 #" "
0 0 17 3 7 #"returns"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 3 #"new"
0 0 17 3 1 #" "
0 0 17 3 4 #"MUPL"
0 0 17 11 1 #" "
0 0 17 3 4 #"list"
0 0 17 3 8 #" of MUPL"
0 0 17 3 1 #" "
0 0 17 3 8 #"integers"
0 0 17 3 1 #" "
0 0 17 3 4 #"that"
0 0 17 3 1 #" "
0 0 17 3 4 #"adds"
0 0 17 3 1 #" "
0 0 17 3 1 #"i"
0 0 17 3 1 #" "
0 0 17 3 2 #"to"
0 0 17 3 1 #" "
0 0 17 3 5 #"every"
0 0 17 3 1 #" "
0 0 17 3 7 #"element"
0 0 17 3 1 #" "
0 0 17 3 2 #"of"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 5 #"list."
0 0 17 3 1 #" "
0 0 17 3 3 #"Use"
0 0 17 3 1 #" "
0 0 17 3 8 #"mupl-map"
0 0 17 3 2 #" ("
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 3 #"use"
0 0 17 3 1 #" "
0 0 17 3 2 #"of"
0 0 17 11 1 #" "
0 0 17 3 4 #"mlet"
0 0 17 3 1 #" "
0 0 17 3 2 #"is"
0 0 17 3 1 #" "
0 0 17 3 5 #"given"
0 0 17 3 7 #" to you"
0 0 17 3 1 #" "
0 0 17 3 2 #"to"
0 0 17 3 1 #" "
0 0 17 3 4 #"make"
0 0 17 3 1 #" "
0 0 17 3 4 #"this"
0 0 17 3 1 #" "
0 0 17 3 6 #"easier"
0 0 17 3 2 #")."
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 12 #"mupl-mapAddN"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 4 #"mlet"
0 0 23 3 1 #" "
0 0 19 3 5 #"\"map\""
0 0 23 3 1 #" "
0 0 14 3 8 #"mupl-map"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"i"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 3 #"lst"
0 0 23 3 2 #") "
0 0 19 3 5 #"\"map\""
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 2 #") "
0 0 14 3 3 #"lst"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 51 #";;;;;;; TESTS (needs to be in separate file! ;;;;;;"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 5 #"test1"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 20 #"mupllist->racketlist"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 8 #"eval-exp"
0 0 23 3 2 #" ("
0 0 14 3 4 #"call"
0 0 23 3 2 #" ("
0 0 14 3 4 #"call"
0 0 23 3 1 #" "
0 0 14 3 12 #"mupl-mapAddN"
0 0 23 3 2 #" ("
0 0 14 3 3 #"int"
0 0 23 3 1 #" "
0 0 20 3 1 #"7"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 14 3 20 #"racketlist->mupllist"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 3 #"int"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 3 #") ("
0 0 14 3 3 #"int"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 3 #") ("
0 0 14 3 3 #"int"
0 0 23 3 1 #" "
0 0 20 3 1 #"9"
0 0 23 3 7 #")))))))"
0 0 23 29 1 #"\n"
0           0
